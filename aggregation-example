db.shared_step_infos.aggregate([
  { $sort: { "branch": 1 } },  // Ensure index on "branch"

  // Graph Lookup to find stepParents
  { 
    $graphLookup: { 
      from: "branches_shared_step", 
      startWith: "$_id", 
      connectFromField: "sharedStepInfoId", 
      connectToField: "childSharedStepInfoIds", 
      as: "stepParents", 
      maxDepth: 10, 
      restrictSearchWithMatch: { branch: "master" } 
    } 
  },

  // Lookup for testParents
  { 
    $lookup: { 
      from: "branches_test", 
      let: { id: "$_id" }, 
      pipeline: [
        { $match: { 
            branch: "master", 
            isArchived: { $ne: true }, 
            $expr: { $in: ["$$id", "$childSharedStepInfoIds"] } 
          } 
        }
      ], 
      as: "testParents" 
    } 
  },

  // Add fields for stepParents and testParents
  { 
    $addFields: { 
      stepParents: { 
        $map: { input: "$stepParents", as: "p", in: "$$p.sharedStepInfoId" } 
      }, 
      testParents: { 
        $map: { input: "$testParents", as: "p", in: "$$p.testId" } 
      } 
    } 
  },

  // Lookup for testStepParents
  { 
    $lookup: { 
      from: "branches_test", 
      let: { stepParents: "$stepParents" }, 
      pipeline: [
        { $match: { branch: "master", isArchived: { $ne: true } } }, 
        { $project: { _id: "$testId", common: { $setIntersection: ["$$stepParents", "$childSharedStepInfoIds"] } } }, 
        { $match: { common: { $exists: true, $ne: [] } } }
      ], 
      as: "testStepParents" 
    } 
  },

  // Add field for testStepParents
  { 
    $addFields: { 
      testStepParents: { $map: { input: "$testStepParents", as: "p", in: "$$p._id" } } 
    } 
  },

  // Project the necessary fields and calculate usage
  { 
    $project: { 
      _id: 1, 
      created_at: 1, 
      hidden: 1, 
      type: 1, 
      name: 1, 
      updated_at: 1, 
      usage: { $size: { $setUnion: ["$testParents", "$testStepParents"] } } 
    } 
  },

  { $skip: 0 },  // Pagination step
  { $limit: 50 } // Pagination limit
]);
